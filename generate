#!/usr/bin/env node

const fs = require('fs');
const util = require('util');

String.prototype.regexIndexOf =function(regex, startpos) {
	const indexOf = this.substring(startpos || 0).search(regex)
	return indexOf >= 0
	    ? indexOf + (startpos || 0)
	    : indexOf;
}

String.prototype.format = function(format, divider, arguments) {
	let index = 0, next = 0, output = "";
    while((next = this.regexIndexOf('\\{([0-9]*?)\\}', index)) != -1) {
    	output += index > 0 ? divider : ""
        output += this.substring(index, next);
        const number = this.substring(next + 1, this.indexOf('}', next + 1))
    	output += util.format(format, arguments[parseInt(number, 10) - 1])
    	index = next + number.length + 2
    }
    output += this.substring(index, this.length)
    return output;
};

const parseBoolean = (map, arg, name) => (map.pos[name] = true) && 1
const parseArgs = (args, positions) => {
	const map = {
		pos: {},
		list: [],
	};

	const defaultReader = (map, arg, name) => (map.pos[name] = arg) && 2

	while(args.length > 0) {
		if (!positions.some(position => {
			if(position.indexOf(args[0]) != -1) {
				const name = position[1].substring(2, position[1].length);
				const reader = position[2] || defaultReader;
				args.splice(0, reader(map, args[1], name) || 1);
				return true
			}
		})) {
			map.list.push(args[0].split(/\s+/));
			args.shift();
		}
	}

	return map;
};

/**
 * Parse arguments
 */
const args = parseArgs(process.argv.slice(2), [
	['-f', '--format'],
	['-pos', '--positions'],
	['-div', '--divider'],
	['-r', '--rate'],
	['-rr', '--random-rate'],
	['-m', '--max'],
	['-p', '--prepend'],
	['-a', '--append'],
	['-c', '--columns'],
	['-d', '--dry-run', parseBoolean],
	['-j', '--json', (map, arg) => map.list.push(JSON.parse(arg.replace(/'/g, '"'))) && 2]
]);

const sets = args.list;
const dryRun = args.pos["dry-run"] || false;
const append = args.pos.append || "";
const prepend = args.pos.prepend || "";
const columns = parseInt(args.pos.columns, 10) || sets.length;
const format = args.pos.format || "%s";
const divider = args.pos.divider || "";
const positions = args.pos.positions || [...Array(columns).keys()].reduce((acc, i) => acc += `{${i + 1}}`, "");
var max = parseInt(args.pos.max, 10) || Number.MAX_SAFE_INTEGER;
const randomRate = args.pos['random-rate'] !== undefined;
const oneEveryX = parseInt(args.pos['random-rate'] || args.pos.rate, 10) || 1;

/**
 * Calculate operation's size
 */
const preCombinations = []
let total = 1;
for (var i = columns - 1; i >= 0; i--) {
	total *= sets[i % sets.length].length;
	const previousSetIndex = (i + 1) % sets.length;
	const previousSetCombinations = i < columns - 1 ? sets[previousSetIndex].length * preCombinations[0] : 1;
	preCombinations.unshift(previousSetCombinations);
}

/**
 * Check if dry run
 */
if(dryRun) {
	const maxByRate = Math.ceil(total / oneEveryX)

	console.log("\n Sets:")
	preCombinations.forEach((_,i) => console.log(`  [${i}]: ${sets[i] ? sets[i].length : "-"} [mod: ${preCombinations[i]}]`));
	console.log(`\nTotal combinations: ${total};`);
	console.log(`This process will generate ` + (max > maxByRate
		? `1 result every ${randomRate ? "~" : ""}${oneEveryX}: ${randomRate ? "~" : ""}${maxByRate} in total.\n`
		: `${max} results in total.\n`));

	console.log("Example:\n")
	max = 1;
}

/**
 * Generate cartesian product
 */
let index = 0;
let numberOfOperations = 0
while(index < total && numberOfOperations < max) {
	const next = [];
	for(var setIndex = 0; setIndex < columns; setIndex += 1) {
		const set = sets[setIndex % sets.length];
		const combinationsBeforeThisColumn = preCombinations[setIndex];
		next.push(set[Math.floor(index / combinationsBeforeThisColumn) % set.length])
	}
	index += randomRate ? Math.ceil(Math.random() * (oneEveryX * 2)) : oneEveryX;
	numberOfOperations += 1;

	console.log(`${prepend}${positions.format(format, divider, next)}${append}`)
}
		